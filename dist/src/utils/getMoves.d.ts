import { CastleRights, Board, CastleSquares, Colors, PieceMap, PieceType, SquareIdx } from '../types/types';
export declare const getPieceMoves: <S extends number>(pieceType: Exclude<PieceType, 'p' | 'P'>, board: import("../types/types").Tuple<"br" | "bb" | "bp" | "bq" | "bk" | "bn" | "wb" | "wp" | "wq" | "wk" | "wn" | "wr" | null, S>, square: import("../types/types").Enumerate<S>) => import("../types/types").Enumerate<S>[];
export declare const getPawnMoves: <S extends number>(board: import("../types/types").Tuple<"br" | "bb" | "bp" | "bq" | "bk" | "bn" | "wb" | "wp" | "wq" | "wk" | "wn" | "wr" | null, S>, color: Colors, square: import("../types/types").Enumerate<S>, enPassant?: import("../types/types").Enumerate<S> | undefined) => import("../types/types").Enumerate<S>[];
export declare function getValidKingMoves<S extends number>(kingSquare: SquareIdx<S>, oppColor: Colors, oppPieceMap: PieceMap<S>, castleRights: CastleRights, castleSquares: CastleSquares<S>, board: Board<S>): import("../types/types").Enumerate<S>[] | undefined;
