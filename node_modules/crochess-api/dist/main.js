!function(U,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.croChess=F():U.croChess=F()}(this,(()=>(()=>{var __webpack_modules__={323:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Castle\": () => (/* reexport */ Castle),\n  \"Gameboard\": () => (/* reexport */ src_Gameboard),\n  \"History\": () => (/* reexport */ History),\n  \"files\": () => (/* reexport */ files),\n  \"ranks\": () => (/* reexport */ ranks),\n  \"startingPositions\": () => (/* reexport */ startingPositions_namespaceObject)\n});\n\n// NAMESPACE OBJECT: ./src/startingPositions.ts\nvar startingPositions_namespaceObject = {};\n__webpack_require__.r(startingPositions_namespaceObject);\n__webpack_require__.d(startingPositions_namespaceObject, {\n  \"standard\": () => (standard)\n});\n\n// EXTERNAL MODULE: ./node_modules/crochess-api/dist/main.js\nvar main = __webpack_require__(427);\n;// CONCATENATED MODULE: ./src/utils/helpers.ts\n\nfunction toXY(square) {\n  const [x, y] = square.split('');\n  return {\n    x: main.files.indexOf(x.toLowerCase()),\n    y: Number(y)\n  };\n}\nfunction fromXY(coord) {\n  const {\n    x,\n    y\n  } = coord;\n  const col = main.files[x];\n  if (!col) return '';\n  return col.concat(y.toString());\n}\nconst calcDistance = squareOne => squareTwo => {\n  const {\n    x: x1,\n    y: y1\n  } = toXY(squareOne);\n  const {\n    x: x2,\n    y: y2\n  } = toXY(squareTwo);\n  const xDiff = x1 - x2;\n  const yDiff = y1 - y2;\n  return {\n    xDiff,\n    yDiff\n  };\n};\nfunction getPieceFromAbbr(abbr) {\n  switch (abbr) {\n    case 'K':\n      return 'king';\n\n    case 'Q':\n      return 'queen';\n\n    case 'N':\n      return 'knight';\n\n    case 'B':\n      return 'bishop';\n\n    case 'R':\n      return 'rook';\n  }\n}\nfunction parseNotation(notation) {\n  const move = {};\n  const replaced = notation.replace(/[+x#]/, '');\n\n  if (+replaced[0] === 0) {\n    // this is castle\n    move.castle = replaced.length === 3 ? 'kingside' : 'queenside';\n    return move;\n  }\n\n  if (replaced[0].toUpperCase() === replaced[0]) {\n    // this is piece move\n    move.pieceType = getPieceFromAbbr(replaced[0]);\n    move.to = replaced.slice(-2);\n\n    switch (replaced.length) {\n      case 4:\n        move.from = replaced[1];\n        break;\n\n      case 5:\n        move.from = replaced.slice(1, 3);\n        break;\n    }\n\n    return move;\n  } else {\n    // is a pawn move\n    move.pieceType = 'pawn';\n\n    if (replaced.includes('=')) {\n      // indicates promotion\n      move.promote = getPieceFromAbbr(replaced.slice(-1));\n    }\n\n    const promoteNoteIndex = replaced.indexOf('=');\n    const noPromoteNotation = replaced.slice(0, promoteNoteIndex === -1 ? replaced.length : promoteNoteIndex);\n\n    if (noPromoteNotation.length === 3) {\n      move.from = replaced[0];\n    }\n\n    move.to = noPromoteNotation.slice(-2);\n  }\n\n  return move;\n}\nfunction deepCopy2dArray(arr) {\n  return arr.map(n => [...n]);\n}\nfunction isObject(obj) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n}\nfunction isLightSquare(square) {\n  const {\n    x,\n    y\n  } = toXY(square);\n  if (x % 2 === 0 && y % 2 === 0 || x % 2 !== 0 && y % 2 !== 0) return true;else return false;\n}\n;// CONCATENATED MODULE: ./src/Piece.ts\n\n\n\nconst Piece = (color, type) => {\n  function hasMove(from, to) {\n    switch (type) {\n      case 'king':\n        {\n          const oneSquareVert = utils_moves.yByN(1)(from)(to) && utils_moves.xByN(0)(from)(to);\n          const oneSquareLateral = utils_moves.xByN(1)(from)(to) && utils_moves.yByN(0)(from)(to);\n          const oneSquareDiagonally = utils_moves.yByN(1)(from)(to) && utils_moves.xByN(1)(from)(to);\n          return from !== to && (oneSquareDiagonally || oneSquareVert || oneSquareLateral);\n        }\n\n      case 'queen':\n        {\n          return from !== to && (utils_moves.diagonal(from)(to) || utils_moves.vertAndLateral(from)(to));\n        }\n\n      case 'bishop':\n        {\n          return from !== to && utils_moves.diagonal(from)(to);\n        }\n\n      case 'knight':\n        {\n          return from !== to && (utils_moves.xByN(1)(from)(to) && utils_moves.yByN(2)(from)(to) || utils_moves.xByN(2)(from)(to) && utils_moves.yByN(1)(from)(to));\n        }\n\n      case 'rook':\n        {\n          return from !== to && utils_moves.vertAndLateral(to)(from);\n        }\n\n      case 'pawn':\n        {\n          const {\n            x: x1,\n            y: y1\n          } = toXY(from);\n          const {\n            x: x2,\n            y: y2\n          } = toXY(to);\n          const onlyMovesInFront = color === 'white' ? y1 < y2 : y1 > y2;\n          const regularMove = utils_moves.yByN(1)(from)(to) && x1 === x2;\n          const firstMove = color === 'white' ? y1 === 2 : y1 === 7;\n          const jumpTwo = utils_moves.yByN(2)(from)(to) && x1 === x2;\n          return from !== to && onlyMovesInFront && (regularMove || firstMove && jumpTwo);\n        }\n    }\n  }\n\n  function getPawnCaptures(origin) {\n    if (type !== 'pawn') return;\n    const {\n      x,\n      y\n    } = toXY(origin);\n    const newY = color === 'white' ? y + 1 : y - 1;\n    const captureOne = {\n      x: x + 1,\n      y: newY\n    };\n    const captureTwo = {\n      x: x - 1,\n      y: newY\n    };\n    return [fromXY(captureOne), fromXY(captureTwo)];\n  }\n\n  return {\n    hasMove,\n    getPawnCaptures,\n\n    get type() {\n      return type;\n    },\n\n    get color() {\n      return color;\n    }\n\n  };\n};\n\n/* harmony default export */ const src_Piece = (Piece);\n;// CONCATENATED MODULE: ./src/utils/moves.ts\n\n\nconst moves = {\n  vertAndLateral: from => to => {\n    const [x1, y1] = from.split('');\n    const [x2, y2] = to.split('');\n    return x1 === x2 || y1 === y2;\n  },\n  diagonal: from => to => {\n    const {\n      x: x1,\n      y: y1\n    } = toXY(from);\n    const {\n      x: x2,\n      y: y2\n    } = toXY(to);\n    return Math.abs(x2 - x1) === Math.abs(y2 - y1);\n  },\n  xByN: num => from => to => {\n    const {\n      x: x1\n    } = toXY(from);\n    const {\n      x: x2\n    } = toXY(to);\n    return Math.abs(x1 - x2) === num;\n  },\n  yByN: num => from => to => {\n    const {\n      y: y1\n    } = toXY(from);\n    const {\n      y: y2\n    } = toXY(to);\n    return Math.abs(y1 - y2) === num;\n  }\n};\n/* harmony default export */ const utils_moves = (moves);\n/* dealing with move vectors */\n\nfunction splitIntoVectors(arrayOfMoves, start) {\n  return arrayOfMoves.reduce((acc, curr) => {\n    const {\n      xDiff,\n      yDiff\n    } = calcDistance(start)(curr);\n    let vector = '';\n    if (yDiff !== 0) vector = yDiff < 0 ? 'up' : 'down';\n    if (xDiff !== 0) vector += xDiff < 0 ? 'Right' : 'Left'; // normalize vector name\n\n    vector = vector.charAt(0).toLowerCase() + vector.slice(1);\n    acc[vector] = acc[vector] || [];\n    acc[vector].push(curr);\n    return acc;\n  }, {});\n}\n\nfunction getBeginningOfVector(vector) {\n  if (vector.length === 0) return '';\n  return vector.reduce((acc, curr) => {\n    const {\n      x: x1,\n      y: y1\n    } = toXY(acc);\n    const {\n      x: x2,\n      y: y2\n    } = toXY(curr);\n    const accIsBeginning = x1 === x2 ? y1 < y2 : x1 < x2;\n    return accIsBeginning ? acc : curr;\n  });\n}\n\nconst getMovesAlongVector = (s1, s2, allSquares) => {\n  const liesSameVertOrLat = moves.vertAndLateral(s1)(s2);\n  const liesSameDiagonally = moves.diagonal(s1)(s2);\n  const liesOnSameLine = liesSameVertOrLat || liesSameDiagonally;\n  if (!liesOnSameLine) return [];\n  const matchingVector = liesSameDiagonally ? 'diagonal' : 'vertAndLateral';\n  const squaresAlongVector = allSquares.filter(s => moves[matchingVector](s1)(s) && moves[matchingVector](s2)(s));\n  return squaresAlongVector;\n};\n/* sort moves */\n\n\nconst sortMovesClosestTo = square => moves => {\n  return [...moves].sort((a, b) => {\n    const {\n      xDiff: x1Diff,\n      yDiff: y1Diff\n    } = calcDistance(square)(a);\n    const aDiff = Math.abs(x1Diff) + Math.abs(y1Diff);\n    const {\n      xDiff: x2Diff,\n      yDiff: y2Diff\n    } = calcDistance(square)(b);\n    const bDiff = Math.abs(x2Diff) + Math.abs(y2Diff);\n    return aDiff - bDiff;\n  });\n};\n/* get moves */\n\n\nfunction getPossibleMoves(origin, board) {\n  // get all moves that can happen if no other pieces were on the board\n  const allSquares = Array.from(board.keys());\n  const square = board.get(origin);\n  const {\n    type,\n    color\n  } = square.piece;\n  const piece = src_Piece(color, type);\n  return allSquares.filter(s => piece.hasMove(origin, s));\n}\n\nfunction getLegalMoves(origin, board) {\n  // get moves regardless of whether or not there is check\n  const square = board.get(origin);\n  const piece = square.piece;\n  const possibleMoves = getPossibleMoves(origin, board);\n  const obstructions = possibleMoves.filter(s => {\n    var _a;\n\n    return (_a = board.get(s)) === null || _a === void 0 ? void 0 : _a.piece;\n  });\n\n  if (!obstructions.length) {\n    switch (piece.type) {\n      case 'pawn':\n        return [...getPawnCaptures(origin, board), ...possibleMoves];\n\n      case 'king':\n        return removeProtectedSquares(origin, possibleMoves, board);\n\n      default:\n        return possibleMoves;\n    }\n  }\n\n  let legalMoves = [];\n\n  switch (piece.type) {\n    case 'knight':\n      {\n        legalMoves = possibleMoves;\n        break;\n      }\n\n    case 'pawn':\n      {\n        const capturesAvailable = getPawnCaptures(origin, board);\n        const unobstructedMoves = removeMovesWithPieces(removeObstructedMoves(origin, possibleMoves, obstructions), board);\n        legalMoves = [...capturesAvailable, ...unobstructedMoves];\n        break;\n      }\n\n    case 'king':\n      {\n        legalMoves = removeProtectedSquares(origin, possibleMoves, board);\n        break;\n      }\n\n    default:\n      {\n        legalMoves = removeObstructedMoves(origin, possibleMoves, obstructions);\n      }\n  }\n\n  return removeMovesWithPieces(legalMoves, board, piece.color);\n}\n\nfunction getLegalMovesInCheck(origin, board, kingPos, squareGivingCheck) {\n  const squaresThatDealWithCheck = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys()));\n  const moves = getLegalMoves(origin, board);\n  return moves.filter(s => squaresThatDealWithCheck.includes(s));\n}\n\nfunction getAttackingMoves(origin, board) {\n  const square = board.get(origin);\n  const {\n    type,\n    color\n  } = square.piece;\n\n  switch (type) {\n    case 'pawn':\n      {\n        const piece = src_Piece(color, 'pawn');\n        return piece.getPawnCaptures(origin);\n      }\n\n    case 'king':\n      {\n        // need to do this because getLegalMoves will recursively call removeProtectedSquares otherwise\n        const attackingMoves = removeMovesWithPieces(getPossibleMoves(origin, board), board, color);\n        return attackingMoves;\n      }\n\n    default:\n      return getLegalMoves(origin, board);\n  }\n}\n\nfunction getAllMovesForColor(color, board, skipKing) {\n  const allMoves = [];\n\n  for (const [square, {\n    piece\n  }] of board.entries()) {\n    if (!piece) continue;\n    if (piece.color !== color) continue;\n    if (skipKing && piece.type === 'king') continue;\n    allMoves.push(getLegalMoves(square, board));\n  }\n\n  return allMoves.flat();\n}\n\nfunction getAttackingMovesForColor(color, board) {\n  const allMoves = [];\n\n  for (const [square, {\n    piece\n  }] of board.entries()) {\n    if (!piece) continue;\n    if (piece.color !== color) continue;\n    allMoves.push(getAttackingMoves(square, board));\n  }\n\n  return allMoves.flat();\n}\n\nfunction getPawnCaptures(pawnSquare, board) {\n  var _a;\n\n  const {\n    color\n  } = (_a = board.get(pawnSquare)) === null || _a === void 0 ? void 0 : _a.piece;\n  const pawn = src_Piece(color, 'pawn');\n  const captureMoves = pawn.getPawnCaptures(pawnSquare);\n  if (!captureMoves) return [];\n  return captureMoves.filter(s => {\n    const squareVal = board.get(s);\n    if (!squareVal) return false;\n    const piece = squareVal.piece;\n    const enPassant = squareVal.enPassant;\n    return piece && piece.color !== pawn.color || enPassant && enPassant.color !== pawn.color;\n  });\n}\n\nfunction getSquaresBetweenKingAndCheck(kingPos, checkPos, allSquares) {\n  // includes kingPos and checkPos\n  const squaresAlongVector = getMovesAlongVector(kingPos, checkPos, allSquares);\n  const squaresBetweenKingAndPiece = removeMovesBehindTwoSquares(kingPos, checkPos, squaresAlongVector);\n  return squaresBetweenKingAndPiece;\n}\n/* filter moves */\n\n\nfunction removeMovesBehindTwoSquares(s1, s2, vector) {\n  const sorted = sortMovesClosestTo(getBeginningOfVector(vector))(vector);\n  let furthestSquare;\n  let closestSquare;\n\n  if (sorted.indexOf(s1) > sorted.indexOf(s2)) {\n    furthestSquare = s1;\n    closestSquare = s2;\n  } else {\n    furthestSquare = s2;\n    closestSquare = s1;\n  }\n\n  const removedOneEnd = removeMovesBehindSquare(furthestSquare)(sorted);\n  const removedBothEnds = removeMovesBehindSquare(closestSquare)(removedOneEnd.reverse());\n  return removedBothEnds;\n}\n\nconst removeMovesBehindSquare = square => moves => {\n  const copy = [...moves];\n  const index = moves.indexOf(square);\n  if (index === -1) return [];\n  copy.splice(index + 1);\n  return copy;\n};\n\nfunction removeObstructedMoves(startingSquare, possibleMoves, obstructions) {\n  // a) split possible moves into vectors (up,down,left,right, and/or diagonals)\n  // b) see which obstructions belong to which vector\n  // c) find the closest obstruction\n  // d) remove all the moves behind that obstruction\n  const filteredMoves = [];\n  const allVectors = splitIntoVectors(possibleMoves, startingSquare);\n  const obstructionVectors = splitIntoVectors(obstructions, startingSquare);\n\n  for (const vector in allVectors) {\n    if (!obstructionVectors[vector]) {\n      // look for vector obstruction is on\n      filteredMoves.push(allVectors[vector]);\n      continue;\n    }\n\n    const sorted = sortMovesClosestTo(startingSquare)(allVectors[vector]);\n    const closestObstruction = sortMovesClosestTo(startingSquare)(obstructionVectors[vector])[0];\n    filteredMoves.push(removeMovesBehindSquare(closestObstruction)(sorted));\n  }\n\n  return filteredMoves.flat();\n}\n\nfunction removeProtectedSquares(kingPos, possibleMoves, board) {\n  var _a;\n\n  const king = (_a = board.get(kingPos)) === null || _a === void 0 ? void 0 : _a.piece;\n  const oppColor = king.color === 'white' ? 'black' : 'white';\n  const enemyPiecesInVicinity = possibleMoves.filter(s => {\n    var _a, _b;\n\n    return ((_b = (_a = board.get(s)) === null || _a === void 0 ? void 0 : _a.piece) === null || _b === void 0 ? void 0 : _b.color) === oppColor;\n  });\n  const squaresProtectedByEnemyInVicinity = enemyPiecesInVicinity.map(s => getAttackingMoves(s, board)).flat(); // bc king cant move if square is protected\n  // set king piece on each square in possible moves to find which squares are protected\n\n  const boardCopy = new Map(board);\n  enemyPiecesInVicinity.forEach(s => boardCopy.set(s, {\n    piece: king\n  }));\n  const squaresProtectedByRange = getAttackingMovesForColor(oppColor, boardCopy);\n  return possibleMoves.filter(s => {\n    return !squaresProtectedByRange.includes(s) && !squaresProtectedByEnemyInVicinity.includes(s);\n  });\n}\n\nfunction removeMovesWithPieces(moves, board, color) {\n  return moves.filter(s => {\n    const squareVal = board.get(s);\n    if (!squareVal) return false;\n    if (color) return !squareVal.piece || squareVal.piece.color !== color;else return !squareVal.piece;\n  });\n}\n/* gameboard checks */\n\n\nfunction getDiscoveredCheck(kingPos, kingColor, vacated, board) {\n  var _a; // openSquare is a square just vacated\n\n\n  let squaresAlongVector = getMovesAlongVector(kingPos, vacated, Array.from(board.keys()));\n  squaresAlongVector = squaresAlongVector.filter(s => s !== kingPos && s !== vacated);\n  if (!squaresAlongVector.length) return '';\n\n  for (const square of squaresAlongVector) {\n    const piece = (_a = board.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\n    if (!piece || piece.color === kingColor) continue;\n    const legalMoves = getLegalMoves(square, board);\n    if (legalMoves.includes(kingPos)) return square;\n  }\n\n  return '';\n}\n\nfunction canBlockOrCaptureCheck(kingPos, squareGivingCheck, board) {\n  var _a;\n\n  const king = (_a = board.get(kingPos)) === null || _a === void 0 ? void 0 : _a.piece;\n  const blockOrCaptureSquares = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys())); // also includes check square\n\n  const ownPieceMoves = getAllMovesForColor(king.color, board, true);\n  return ownPieceMoves.some(move => blockOrCaptureSquares.includes(move));\n}\n\nfunction getPiecesWithMove(board, move, pieceType, color) {\n  const pieceSquares = [];\n\n  for (const [square, {\n    piece\n  }] of board.entries()) {\n    if (!piece) continue;\n    if (piece.color !== color) continue;\n    if (piece.type !== pieceType) continue;\n  }\n}\n\n\n;// CONCATENATED MODULE: ./src/ranksAndFiles.ts\nconst files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\nconst ranks = [1, 2, 3, 4, 5, 6, 7, 8];\n\n;// CONCATENATED MODULE: ./src/Castle.ts\nfunction Castle(whiteKingside, whiteQueenside, blackKingside, blackQueenside) {\n  return {\n    white: {\n      kingside: whiteKingside,\n      queenside: whiteQueenside\n    },\n    black: {\n      kingside: blackKingside,\n      queenside: blackQueenside\n    }\n  };\n}\n;// CONCATENATED MODULE: ./src/moveNotation.ts\nconst moveNotation = notation => {\n  function castle(side) {\n    notation = side === 'kingside' ? '0-0' : '0-0-0';\n    return notation;\n  }\n\n  const affix = {\n    pieceNotation: (pieceType, differentiation) => {\n      differentiation = differentiation || '';\n\n      switch (pieceType) {\n        case 'pawn':\n          {\n            notation = differentiation + notation;\n            return notation;\n          }\n\n        case 'king':\n          {\n            notation = 'K' + notation;\n            return notation;\n          }\n\n        case 'knight':\n          {\n            notation = 'N' + differentiation + notation;\n            return notation;\n          }\n\n        default:\n          {\n            notation = pieceType[0].toUpperCase() + differentiation + notation;\n            return notation;\n          }\n      }\n    },\n    capture: () => {\n      notation = `x${notation}`;\n      return notation;\n    },\n    promote: pieceType => {\n      const suffix = '=' + pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\n      notation += '=' + suffix;\n      return notation;\n    },\n    check: () => {\n      notation += '+';\n      return notation;\n    },\n    checkmate: () => {\n      notation += '#';\n      return notation;\n    }\n  };\n\n  function get(moveDetails) {\n    const {\n      capture,\n      castle: castleSide,\n      promote,\n      check,\n      checkmate,\n      pieceType,\n      differentiation\n    } = moveDetails;\n    if (castleSide) return castle(castleSide);\n    if (capture) affix.capture();\n    affix.pieceNotation(pieceType, differentiation);\n    if (promote) affix.promote(promote);\n    if (checkmate) affix.checkmate();else if (check) affix.check();\n    return notation;\n  }\n\n  return {\n    get\n  };\n};\n\n/* harmony default export */ const src_moveNotation = (moveNotation);\n;// CONCATENATED MODULE: ./src/utils/compare.ts\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nfunction compare1dArray(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n\n  return true;\n}\n\nfunction compareObjects(obj1, obj2) {\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length) return false;\n\n  for (let i = 0; i < keys1.length; i++) {\n    const key = keys1[i];\n\n    switch (true) {\n      case isObject(obj1[key]) && isObject(obj2[key]):\n        {\n          if (!compareObjects(obj1[key], obj2[key])) return false;\n          break;\n        }\n\n      case Array.isArray(obj1[key]) && Array.isArray(obj2[key]):\n        {\n          if (!compare1dArray(obj1[key], obj2[key])) return false;\n          break;\n        }\n\n      default:\n        {\n          if (obj1[key] !== obj2[key]) return false;\n        }\n    }\n  }\n\n  return true;\n}\nfunction compare1dArrayNoOrder(arr1, arr2) {\n  return arr1.length === arr2.length && arr1.every(v => arr2.includes(v));\n}\n;// CONCATENATED MODULE: ./src/Gameboard.ts\n\n\n\n\n\n\n\n\n\nfunction createBoard() {\n  return files.reduce((acc, file) => {\n    ranks.forEach(rank => {\n      const square = file.concat(rank.toString());\n      acc.set(square, {\n        piece: null\n      });\n    });\n    return acc;\n  }, new Map());\n}\n\nconst Gameboard = (board = createBoard(), squaresGivingCheck = [], CastleRights = Castle(true, true, true, true)) => {\n  board = new Map(board);\n\n  function placePieces(pieceMap, boardMap = board) {\n    let color;\n\n    for (color in pieceMap) {\n      const map = pieceMap[color];\n      let pieceType;\n\n      for (pieceType in map) {\n        const squares = map[pieceType];\n        squares.forEach(s => at(s, boardMap).place({\n          type: pieceType,\n          color: color\n        }));\n      }\n    }\n  }\n\n  function makeMove(s1, s2, promote) {\n    const piece = at(s1).piece; // validate move\n\n    if (!piece) return;\n    if (!validate.move(s1, s2)) return;\n    if (promote && !validate.promotion(s1, s2)) return;\n\n    switch (piece.type) {\n      case 'pawn':\n        {\n          if (promote) {\n            at(s1).promote(promote);\n          }\n\n          if (enPassant.isCapture(s1, s2)) {\n            enPassant.capture(s2);\n          }\n\n          enPassant.remove();\n\n          if (enPassant.checkToggle(s1, s2)) {\n            enPassant.toggle(piece.color, s2);\n          }\n\n          from(s1).to(s2);\n          break;\n        }\n\n      case 'king':\n        {\n          // check if move is castle\n          const castleSide = get.castleSide(piece.color, s2);\n          if (castleSide) castle(piece.color, castleSide);else from(s1).to(s2);\n          enPassant.remove();\n          break;\n        }\n\n      default:\n        from(s1).to(s2);\n        enPassant.remove();\n    }\n\n    return board;\n  }\n\n  function castle(color, side, boardMap = board) {\n    const castleSquares = get.castleSquares(color)[side];\n    const kingPos = get.kingPosition(color, boardMap);\n    const rookPos = getRookPos();\n    if (!rookPos || !kingPos) return;\n    from(rookPos, boardMap).to(castleSquares[0]);\n    from(kingPos, boardMap).to(castleSquares[1]);\n\n    function getRookPos() {\n      const pieceMap = get.pieceMap(boardMap);\n      const rookPos = pieceMap[color].rook.find(square => {\n        const file = square.split('')[0];\n        const indexOfFile = files.indexOf(file);\n        if (indexOfFile === -1) return false;\n        return side === 'kingside' ? indexOfFile > 3 : indexOfFile < 3;\n      });\n      return rookPos;\n    } // need to get king position\n    // need to get castle squares\n    // need to find rook\n\n  }\n\n  const enPassant = (() => {\n    return {\n      getSquare: (current, color) => {\n        const {\n          x,\n          y\n        } = toXY(current);\n        const newY = color === 'white' ? y - 1 : y + 1;\n        return fromXY({\n          x,\n          y: newY\n        });\n      },\n      checkToggle: (from, to) => {\n        const {\n          y: y1\n        } = toXY(from);\n        const {\n          y: y2\n        } = toXY(to);\n        return Math.abs(y1 - y2) === 2;\n      },\n      toggle: (color, current, boardMap = board) => {\n        const enPassantSquare = enPassant.getSquare(current, color);\n        at(enPassantSquare, boardMap).setEnPassant(color, current);\n        return enPassantSquare;\n      },\n      remove: (boardMap = board) => {\n        for (const squareObj of boardMap.values()) {\n          if (squareObj.enPassant) return squareObj.enPassant = undefined;\n        }\n      },\n      isCapture: (from, to, boardMap = board) => {\n        var _a;\n\n        const piece = at(from, boardMap).piece;\n        const enPassant = (_a = boardMap.get(to)) === null || _a === void 0 ? void 0 : _a.enPassant;\n        if (!piece || piece.type !== 'pawn') return false;\n        if (!enPassant) return false;\n        if (enPassant.color === piece.color) return false;\n        return true;\n      },\n      capture: (to, boardMap = board) => {\n        var _a;\n\n        const enPassant = (_a = boardMap.get(to)) === null || _a === void 0 ? void 0 : _a.enPassant;\n        at(enPassant.current, boardMap).remove();\n      }\n    };\n  })();\n\n  const isDraw = {\n    byRepetition: (boardStates, newBoardState) => {\n      const repeated = boardStates.filter(bs => {\n        return compareObjects(bs, newBoardState);\n      }).length;\n      return {\n        threefold: repeated >= 2,\n        fivefold: repeated === 4\n      };\n    },\n    byMoveRule: history => {\n      const flat = history.flat();\n      const lastPawnMoveOrCaptureIdx = flat.length - 1 - [...flat].reverse().findIndex(m => {\n        return m[0].toLowerCase() === m[0] || m.includes('x');\n      });\n      const movesSinceLastPawnMoveOrCapture = flat.slice(lastPawnMoveOrCaptureIdx).length;\n      return {\n        fifty: movesSinceLastPawnMoveOrCapture >= 100,\n        seventyFive: movesSinceLastPawnMoveOrCapture >= 150\n      };\n    },\n    byStalemate: (turn, boardMap = board) => {\n      const oppColor = turn === 'white' ? 'black' : 'white';\n      if (!squaresGivingCheck.length && !getAllMovesForColor(oppColor, boardMap).length) return true;else return false;\n    },\n    byInsufficientMaterial: (pieceMap = get.pieceMap()) => {\n      const piecesLeft = {\n        white: Object.keys(pieceMap.white),\n        black: Object.keys(pieceMap.black)\n      };\n      const insufficientMaterial = new Map();\n      insufficientMaterial.set(['king'].toString(), [['king'], ['king', 'bishop'], ['king', 'knight']]);\n      insufficientMaterial.set(['king', 'bishop'].toString(), [['king', 'bishop']]);\n      insufficientMaterial.set(['bishop', 'king'].toString(), [['king', 'bishop']]);\n      let color; // if there's more than one of each piece, there's no draw\n\n      for (color in piecesLeft) {\n        for (const pieceType of piecesLeft[color]) {\n          if (pieceMap[color][pieceType].length !== 1) return false;\n        }\n      }\n\n      for (color in pieceMap) {\n        const oppColor = color === 'white' ? 'black' : 'white';\n        const drawPossibilities = insufficientMaterial.get(piecesLeft[color].toString());\n        if (!drawPossibilities) continue; // piecesLeft of oppColor has to match one of the draw possibilities\n\n        const drawImminent = drawPossibilities.some(a => {\n          if (!compare1dArrayNoOrder(a, piecesLeft[oppColor])) return false;\n\n          if (piecesLeft[color].includes('bishop')) {\n            return isLightSquare(pieceMap[color].bishop[0]) === isLightSquare(pieceMap[oppColor].bishop[0]);\n          }\n\n          return true;\n        });\n        if (drawImminent) return true;\n      }\n\n      return false;\n    }\n  };\n\n  const at = (square, boardMap = board) => ({\n    place: piece => {\n      if (!boardMap.get(square)) return;\n      boardMap.set(square, {\n        piece\n      });\n    },\n    remove: () => {\n      if (!boardMap.get(square)) return;\n      boardMap.set(square, {\n        piece: null\n      });\n    },\n    promote: pieceType => {\n      const squareVal = boardMap.get(square);\n      const piece = squareVal === null || squareVal === void 0 ? void 0 : squareVal.piece;\n      if (!piece) return;\n      boardMap.set(square, Object.assign(Object.assign({}, squareVal), {\n        piece: Object.assign(Object.assign({}, piece), {\n          type: pieceType\n        })\n      }));\n    },\n    setEnPassant: (color, current) => {\n      if (!boardMap.get(square)) return;\n      boardMap.set(square, {\n        piece: null,\n        enPassant: {\n          current\n          /* square pawn is on */\n          ,\n          color\n        }\n      });\n    },\n\n    get piece() {\n      var _a;\n\n      return (_a = boardMap.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\n    },\n\n    getLegalMoves: (checks = squaresGivingCheck || []) => {\n      const {\n        type,\n        color\n      } = at(square, boardMap).piece;\n\n      switch (checks.length) {\n        case 2:\n          {\n            if (type !== 'king') return [];\n            return getLegalMoves(square, boardMap);\n          }\n\n        case 1:\n          {\n            if (type === 'king') return getLegalMoves(square, boardMap);else return getLegalMovesInCheck(square, boardMap, get.kingPosition(color), checks[0]);\n          }\n\n        default:\n          {\n            if (type === 'king') {\n              let legalMoves = getLegalMoves(square, boardMap);\n              if (get.canCastle(color, 'kingside')) legalMoves = [...legalMoves, ...get.castleSquares(color).kingside];\n              if (get.canCastle(color, 'queenside')) legalMoves = [...legalMoves, ...get.castleSquares(color).queenside];\n              return legalMoves;\n            } else return getLegalMoves(square, boardMap);\n          }\n      }\n    }\n  });\n\n  const from = (s1, boardMap = board) => ({\n    to: s2 => {\n      const piece = at(s1, boardMap).piece;\n      if (!piece) return; // move piece\n\n      at(s1, boardMap).remove();\n      at(s2, boardMap).place(piece);\n    }\n  });\n\n  const get = {\n    kingPosition: (color, boardMap = board) => {\n      for (const [square, value] of boardMap.entries()) {\n        if (value.piece && value.piece.type === 'king' && value.piece.color === color) return square;\n      }\n    },\n    pieceMap: (boardMap = board) => {\n      const pieceMap = {\n        white: {},\n        black: {}\n      };\n\n      for (const [square, value] of boardMap.entries()) {\n        const {\n          piece\n        } = value;\n        if (!piece) continue;\n        const {\n          type,\n          color\n        } = piece;\n        if (pieceMap[color][type]) pieceMap[color][type].push(square);else pieceMap[color][type] = [square];\n      }\n\n      return pieceMap;\n    },\n    piecesThatHitSquare: (color, pieceType, square, boardMap = board) => {\n      const pieceMap = get.pieceMap(boardMap);\n      if (pieceMap[color][pieceType].includes(square)) return [];\n      const pieces = [];\n      if (pieceMap[color][pieceType].length <= 1) return [];\n      pieceMap[color][pieceType].forEach(s => {\n        if (at(s, boardMap).getLegalMoves().includes(square)) pieces.push(s);\n      });\n      return pieces;\n    },\n    squaresGivingCheckAfterMove: (from, end) => {\n      var _a;\n\n      const squaresGivingCheck = [];\n      const piece = (_a = board.get(end)) === null || _a === void 0 ? void 0 : _a.piece;\n      const oppColor = piece.color === 'white' ? 'black' : 'white';\n      const kingPosition = get.kingPosition(oppColor);\n      const pieceHitsKing = getLegalMoves(end, board).includes(kingPosition);\n      if (pieceHitsKing) squaresGivingCheck.push(end);\n      const discoveredCheck = getDiscoveredCheck(kingPosition, oppColor, from, board);\n      if (discoveredCheck && discoveredCheck !== end) squaresGivingCheck.push(discoveredCheck);\n      return squaresGivingCheck;\n    },\n    isCheckmate: (colorOfKing, squaresGivingCheck, boardMap = board) => {\n      const kingPos = get.kingPosition(colorOfKing, boardMap);\n      const legalMoves = at(kingPos, boardMap).getLegalMoves(); // check if check can be blocked\n\n      if (squaresGivingCheck.length === 1) {\n        if (canBlockOrCaptureCheck(kingPos, squaresGivingCheck[0], boardMap)) return false;\n      }\n\n      if (legalMoves.length) return false;\n      return true;\n    },\n\n    castleSquares(color) {\n      const rank = color === 'white' ? 1 : 8;\n      return {\n        kingside: [`f${rank}`, `g${rank}`],\n        queenside: [`d${rank}`, `c${rank}`]\n      };\n    },\n\n    castleSide(color, to) {\n      let castleSide = '';\n      const castleSquares = get.castleSquares(color);\n\n      for (const [side, squares] of Object.entries(castleSquares)) {\n        if (squares[1] === to) castleSide = side;\n      }\n\n      return castleSide;\n    },\n\n    castleRightsAfterMove: (square, boardMap = board, castleRights = CastleRights) => {\n      const piece = at(square, boardMap).piece;\n      castleRights = {\n        white: Object.assign({}, castleRights.white),\n        black: Object.assign({}, castleRights.black)\n      };\n\n      if (castleRights[piece.color].kingside || castleRights[piece.color].queenside) {\n        // check if i need to change castling rights\n        if (piece.type === 'king') {\n          castleRights[piece.color].kingside = false;\n          castleRights[piece.color].queenside = false;\n        }\n\n        if (piece.type === 'rook') {\n          // need to find if it is kingside or queenside rook\n          const [file] = square.split('');\n          const kingside = files.indexOf(file) > 3;\n          if (kingside) castleRights[piece.color].kingside = false;else castleRights[piece.color].queenside = false;\n        }\n      }\n\n      return castleRights;\n    },\n    canCastle: (color, side, boardMap = board) => {\n      if (CastleRights && !CastleRights[color][side]) return false; // check if rook still exists\n\n      if (!checkIfRookExists()) return false;\n      const oppColor = color === 'white' ? 'black' : 'white';\n      const oppMoves = getAttackingMovesForColor(oppColor, boardMap);\n      const castleSquares = get.castleSquares(color)[side];\n\n      for (const square of castleSquares) {\n        // check if castle square is cleared\n        if (at(square, boardMap).piece) return false; // make sure castle square isnt attacked\n\n        if (oppMoves.includes(square)) return false;\n      }\n\n      return true;\n\n      function checkIfRookExists() {\n        let rookExists = false;\n        const rank = color === 'white' ? 1 : 8;\n        const loopStart = side === 'queenside' ? files.indexOf('a') : files.indexOf('d');\n        const loopEnd = side === 'queenside' ? files.indexOf('e') : files.indexOf('h');\n\n        for (let i = loopStart; i <= loopEnd; i++) {\n          const square = files[i] + rank;\n          const piece = at(square, boardMap).piece;\n          if (!piece) continue;\n          if (piece.type === 'rook') rookExists = true;\n        }\n\n        return rookExists;\n      }\n    },\n    boardStatesFromHistory: history => {\n      var _a;\n\n      const boardStates = [];\n      let castleRights = Castle(true, true, true, true);\n      const boardMap = createBoard();\n      placePieces(standard, boardMap);\n      let pieceMap = standard; // history is 2d array\n\n      const flat = history.flat();\n      /* iterate over history */\n\n      for (const [i, m] of flat.entries()) {\n        const parsed = parseNotation(m);\n        const color = i % 2 === 0 ? 'white' : 'black';\n\n        if (parsed.castle) {\n          castle(color, parsed.castle, boardMap);\n          castleRights = {\n            white: Object.assign({}, castleRights.white),\n            black: Object.assign({}, castleRights.black)\n          };\n          castleRights[color].kingside = false;\n          castleRights[color].queenside = false;\n          pieceMap = get.pieceMap(boardMap);\n          boardStates.push({\n            pieceMap,\n            castleRights\n          });\n          continue;\n        }\n\n        const possiblePieces = pieceMap[color][parsed.pieceType].filter(s => getLegalMoves(s, boardMap).includes(parsed.to)); // get 'from' square\n\n        let s1;\n\n        if (parsed.from) {\n          const notation = parsed.from;\n          if (notation.length === 2) s1 = notation;else {\n            s1 = possiblePieces.find(s => {\n              // if notation is a number, that means piece is on the rank === notation, if not, same file\n              return isNaN(Number(notation)) ? s[0] === notation : s[1] === notation;\n            }) || '';\n          }\n        } else s1 = possiblePieces[0];\n\n        const piece = at(s1, boardMap).piece;\n\n        if (!s1 || !piece) {\n          break;\n        }\n\n        let enPassantSquare = ''; // make move\n\n        if (piece.type === 'pawn') {\n          if (enPassant.isCapture(s1, parsed.to, boardMap)) {\n            enPassant.capture(parsed.to, boardMap);\n          }\n\n          enPassant.remove(boardMap);\n          if (enPassant.checkToggle(s1, parsed.to)) enPassantSquare = enPassant.toggle(color, parsed.to, boardMap);\n\n          if (parsed.promote) {\n            at(s1, boardMap).promote(parsed.promote);\n          }\n        } else enPassant.remove(boardMap);\n\n        from(s1, boardMap).to(parsed.to);\n        castleRights = get.castleRightsAfterMove(parsed.to, boardMap, castleRights);\n        pieceMap = get.pieceMap(boardMap);\n        boardStates.push({\n          pieceMap,\n          castleRights,\n          enPassant: (_a = boardMap.get(enPassantSquare)) === null || _a === void 0 ? void 0 : _a.enPassant\n        });\n      }\n\n      return boardStates;\n    },\n\n    moveNotation(from, to, promote, check, checkmate, boardMap = board) {\n      var _a;\n\n      const moveDetails = {};\n      const {\n        type,\n        color\n      } = at(from, boardMap).piece;\n      moveDetails.pieceType = type;\n      if (checkmate) moveDetails.checkmate = checkmate;else if (check) moveDetails.check = check;\n      let capture = false;\n\n      switch (type) {\n        case 'pawn':\n          {\n            capture = (_a = src_Piece(color, type).getPawnCaptures(from)) === null || _a === void 0 ? void 0 : _a.includes(to);\n            moveDetails.capture = capture;\n            if (capture) moveDetails.differentiation = from[0];\n            break;\n          }\n\n        case 'king':\n          {\n            moveDetails.castle = get.castleSide(color, to) || undefined;\n            break;\n          }\n\n        default:\n          {\n            capture = !!at(to, boardMap).piece;\n            moveDetails.capture = capture;\n          }\n      }\n\n      if (promote) moveDetails.promote = promote; // get differentiation ie. when multiple pieces hit the same square\n\n      const piecesThatHitSquare = get.piecesThatHitSquare(color, type, to, boardMap);\n\n      switch (piecesThatHitSquare.length) {\n        case 3:\n          moveDetails.differentiation = from;\n          break;\n\n        case 2:\n          {\n            // need to find if on same file or rank\n            const otherPiece = piecesThatHitSquare.find(s => s !== from);\n            moveDetails.differentiation = otherPiece[0] === from[0] ? from[1] : from[0];\n          }\n      }\n\n      return src_moveNotation(to).get(moveDetails);\n    }\n\n  };\n  const validate = {\n    move: (from, to, boardMap = board) => {\n      const piece = at(from, boardMap).piece;\n      if (!piece) return false;\n      if (!at(from, boardMap).getLegalMoves().includes(to)) return false;\n      return true;\n    },\n    promotion: (from, to, boardMap = board) => {\n      const piece = at(from, boardMap).piece;\n      if ((piece === null || piece === void 0 ? void 0 : piece.type) !== 'pawn') return false;\n      const endOfBoard = piece.color === 'white' ? 8 : 1;\n      const [, rank] = to.split('');\n      if (+rank !== endOfBoard) return false;\n      return true;\n    }\n  };\n  return {\n    createBoard,\n    placePieces,\n    castle,\n    isDraw,\n    enPassant,\n    at,\n    from,\n    get,\n    validate,\n    makeMove,\n\n    get board() {\n      return board;\n    }\n\n  };\n};\n\n/* harmony default export */ const src_Gameboard = (Gameboard);\n;// CONCATENATED MODULE: ./src/History.ts\n\nfunction History(prevHistory) {\n  const history = deepCopy2dArray(prevHistory) || [];\n  return {\n    insertMove: notation => {\n      const lastPair = history[history.length - 1];\n\n      if (lastPair && lastPair.length === 1) {\n        lastPair.push(notation);\n      } else {\n        const newPair = [notation];\n        history.push(newPair);\n      }\n\n      return history;\n    }\n  };\n}\n;// CONCATENATED MODULE: ./src/startingPositions.ts\nconst standard = {\n  white: {\n    rook: ['a1', 'h1'],\n    knight: ['g1', 'b1'],\n    bishop: ['f1', 'c1'],\n    king: ['e1'],\n    queen: ['d1'],\n    pawn: ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2']\n  },\n  black: {\n    rook: ['a8', 'h8'],\n    knight: ['g8', 'b8'],\n    bishop: ['f8', 'c8'],\n    king: ['e8'],\n    queen: ['d8'],\n    pawn: ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7']\n  }\n};\n\n;// CONCATENATED MODULE: ./src/main.ts\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///323\n")},427:function(module){eval("!function(Q,F){ true?module.exports=F():0}(this,(function(){return(()=>{\"use strict\";var __webpack_modules__={708:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval(\"// ESM COMPAT FLAG\\n__webpack_require__.r(__webpack_exports__);\\n\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"Castle\\\": () => (/* reexport */ Castle),\\n  \\\"Gameboard\\\": () => (/* reexport */ src_Gameboard),\\n  \\\"History\\\": () => (/* reexport */ History),\\n  \\\"files\\\": () => (/* reexport */ files),\\n  \\\"ranks\\\": () => (/* reexport */ ranks),\\n  \\\"startingPositions\\\": () => (/* reexport */ startingPositions_namespaceObject)\\n});\\n\\n// NAMESPACE OBJECT: ./src/startingPositions.ts\\nvar startingPositions_namespaceObject = {};\\n__webpack_require__.r(startingPositions_namespaceObject);\\n__webpack_require__.d(startingPositions_namespaceObject, {\\n  \\\"standard\\\": () => (standard)\\n});\\n\\n;// CONCATENATED MODULE: ./src/utils/helpers.ts\\nfunction toXY(square) {\\n  const [x, y] = square.split('');\\n  return {\\n    x: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'].indexOf(x.toLowerCase()),\\n    y: Number(y)\\n  };\\n}\\n\\nfunction fromXY(coord) {\\n  const {\\n    x,\\n    y\\n  } = coord;\\n  const col = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'][x];\\n  if (!col) return '';\\n  return col.concat(y.toString());\\n}\\n\\nconst calcDistance = squareOne => squareTwo => {\\n  const {\\n    x: x1,\\n    y: y1\\n  } = toXY(squareOne);\\n  const {\\n    x: x2,\\n    y: y2\\n  } = toXY(squareTwo);\\n  const xDiff = x1 - x2;\\n  const yDiff = y1 - y2;\\n  return {\\n    xDiff,\\n    yDiff\\n  };\\n};\\n\\nfunction getPieceFromAbbr(abbr) {\\n  switch (abbr) {\\n    case 'K':\\n      return 'king';\\n\\n    case 'Q':\\n      return 'queen';\\n\\n    case 'N':\\n      return 'knight';\\n\\n    case 'B':\\n      return 'bishop';\\n\\n    case 'R':\\n      return 'rook';\\n  }\\n}\\n\\nfunction parseNotation(notation) {\\n  const move = {};\\n  const replaced = notation.replace(/[+x#]/, '');\\n\\n  if (+replaced[0] === 0) {\\n    // this is castle\\n    move.castle = replaced.length === 3 ? 'kingside' : 'queenside';\\n    return move;\\n  }\\n\\n  if (replaced[0].toUpperCase() === replaced[0]) {\\n    // this is piece move\\n    move.pieceType = getPieceFromAbbr(replaced[0]);\\n    move.to = replaced.slice(-2);\\n\\n    if (replaced.length === 4) {\\n      move.from = replaced[1];\\n    }\\n\\n    return move;\\n  } else {\\n    // is a pawn move\\n    move.pieceType = 'pawn';\\n\\n    if (replaced.includes('=')) {\\n      // indicates promotion\\n      move.promote = getPieceFromAbbr(replaced.slice(-1));\\n    }\\n\\n    const promoteNoteIndex = replaced.indexOf('=');\\n    const noPromoteNotation = replaced.slice(0, promoteNoteIndex === -1 ? replaced.length : promoteNoteIndex);\\n\\n    if (noPromoteNotation.length === 3) {\\n      move.from = replaced[0];\\n    }\\n\\n    move.to = noPromoteNotation.slice(-2);\\n  }\\n\\n  return move;\\n}\\n\\n\\n;// CONCATENATED MODULE: ./src/Piece.ts\\n\\n\\n\\nconst Piece = (color, type) => {\\n  function hasMove(from, to) {\\n    switch (type) {\\n      case 'king':\\n        {\\n          const oneSquareVert = utils_moves.yByN(1)(from)(to) && utils_moves.xByN(0)(from)(to);\\n          const oneSquareLateral = utils_moves.xByN(1)(from)(to) && utils_moves.yByN(0)(from)(to);\\n          const oneSquareDiagonally = utils_moves.yByN(1)(from)(to) && utils_moves.xByN(1)(from)(to);\\n          return from !== to && (oneSquareDiagonally || oneSquareVert || oneSquareLateral);\\n        }\\n\\n      case 'queen':\\n        {\\n          return from !== to && (utils_moves.diagonal(from)(to) || utils_moves.vertAndLateral(from)(to));\\n        }\\n\\n      case 'bishop':\\n        {\\n          return from !== to && utils_moves.diagonal(from)(to);\\n        }\\n\\n      case 'knight':\\n        {\\n          return from !== to && (utils_moves.xByN(1)(from)(to) && utils_moves.yByN(2)(from)(to) || utils_moves.xByN(2)(from)(to) && utils_moves.yByN(1)(from)(to));\\n        }\\n\\n      case 'rook':\\n        {\\n          return from !== to && utils_moves.vertAndLateral(to)(from);\\n        }\\n\\n      case 'pawn':\\n        {\\n          const {\\n            x: x1,\\n            y: y1\\n          } = toXY(from);\\n          const {\\n            x: x2,\\n            y: y2\\n          } = toXY(to);\\n          const onlyMovesInFront = color === 'white' ? y1 < y2 : y1 > y2;\\n          const regularMove = utils_moves.yByN(1)(from)(to) && x1 === x2;\\n          const firstMove = color === 'white' ? y1 === 2 : y1 === 7;\\n          const jumpTwo = utils_moves.yByN(2)(from)(to) && x1 === x2;\\n          return from !== to && onlyMovesInFront && (regularMove || firstMove && jumpTwo);\\n        }\\n    }\\n  }\\n\\n  function getPawnCaptures(origin) {\\n    if (type !== 'pawn') return;\\n    const {\\n      x,\\n      y\\n    } = toXY(origin);\\n    const newY = color === 'white' ? y + 1 : y - 1;\\n    const captureOne = {\\n      x: x + 1,\\n      y: newY\\n    };\\n    const captureTwo = {\\n      x: x - 1,\\n      y: newY\\n    };\\n    return [fromXY(captureOne), fromXY(captureTwo)];\\n  }\\n\\n  return {\\n    hasMove,\\n    getPawnCaptures,\\n\\n    get type() {\\n      return type;\\n    },\\n\\n    get color() {\\n      return color;\\n    }\\n\\n  };\\n};\\n\\n/* harmony default export */ const src_Piece = (Piece);\\n;// CONCATENATED MODULE: ./src/utils/moves.ts\\n\\n\\nconst moves = {\\n  vertAndLateral: from => to => {\\n    const [x1, y1] = from.split('');\\n    const [x2, y2] = to.split('');\\n    return x1 === x2 || y1 === y2;\\n  },\\n  diagonal: from => to => {\\n    const {\\n      x: x1,\\n      y: y1\\n    } = toXY(from);\\n    const {\\n      x: x2,\\n      y: y2\\n    } = toXY(to);\\n    return Math.abs(x2 - x1) === Math.abs(y2 - y1);\\n  },\\n  xByN: num => from => to => {\\n    const {\\n      x: x1\\n    } = toXY(from);\\n    const {\\n      x: x2\\n    } = toXY(to);\\n    return Math.abs(x1 - x2) === num;\\n  },\\n  yByN: num => from => to => {\\n    const {\\n      y: y1\\n    } = toXY(from);\\n    const {\\n      y: y2\\n    } = toXY(to);\\n    return Math.abs(y1 - y2) === num;\\n  }\\n};\\n/* harmony default export */ const utils_moves = (moves);\\n/* dealing with move vectors */\\n\\nfunction splitIntoVectors(arrayOfMoves, start) {\\n  return arrayOfMoves.reduce((acc, curr) => {\\n    const {\\n      xDiff,\\n      yDiff\\n    } = calcDistance(start)(curr);\\n    let vector = '';\\n    if (yDiff !== 0) vector = yDiff < 0 ? 'up' : 'down';\\n    if (xDiff !== 0) vector += xDiff < 0 ? 'Right' : 'Left'; // normalize vector name\\n\\n    vector = vector.charAt(0).toLowerCase() + vector.slice(1);\\n    acc[vector] = acc[vector] || [];\\n    acc[vector].push(curr);\\n    return acc;\\n  }, {});\\n}\\n\\nfunction getBeginningOfVector(vector) {\\n  if (vector.length === 0) return '';\\n  return vector.reduce((acc, curr) => {\\n    const {\\n      x: x1,\\n      y: y1\\n    } = toXY(acc);\\n    const {\\n      x: x2,\\n      y: y2\\n    } = toXY(curr);\\n    const accIsBeginning = x1 === x2 ? y1 < y2 : x1 < x2;\\n    return accIsBeginning ? acc : curr;\\n  });\\n}\\n\\nconst getMovesAlongVector = (s1, s2, allSquares) => {\\n  const liesSameVertOrLat = moves.vertAndLateral(s1)(s2);\\n  const liesSameDiagonally = moves.diagonal(s1)(s2);\\n  const liesOnSameLine = liesSameVertOrLat || liesSameDiagonally;\\n  if (!liesOnSameLine) return [];\\n  const matchingVector = liesSameDiagonally ? 'diagonal' : 'vertAndLateral';\\n  const squaresAlongVector = allSquares.filter(s => moves[matchingVector](s1)(s) && moves[matchingVector](s2)(s));\\n  return squaresAlongVector;\\n};\\n/* sort moves */\\n\\n\\nconst sortMovesClosestTo = square => moves => {\\n  return [...moves].sort((a, b) => {\\n    const {\\n      xDiff: x1Diff,\\n      yDiff: y1Diff\\n    } = calcDistance(square)(a);\\n    const aDiff = Math.abs(x1Diff) + Math.abs(y1Diff);\\n    const {\\n      xDiff: x2Diff,\\n      yDiff: y2Diff\\n    } = calcDistance(square)(b);\\n    const bDiff = Math.abs(x2Diff) + Math.abs(y2Diff);\\n    return aDiff - bDiff;\\n  });\\n};\\n/* get moves */\\n\\n\\nfunction getPossibleMoves(origin, board) {\\n  // get all moves that can happen if no other pieces were on the board\\n  const allSquares = Array.from(board.keys());\\n  const square = board.get(origin);\\n  const {\\n    type,\\n    color\\n  } = square.piece;\\n  const piece = src_Piece(color, type);\\n  return allSquares.filter(s => piece.hasMove(origin, s));\\n}\\n\\nfunction getLegalMoves(origin, board) {\\n  // get moves regardless of whether or not there is check\\n  const square = board.get(origin);\\n  const piece = square.piece;\\n  const possibleMoves = getPossibleMoves(origin, board);\\n  const obstructions = possibleMoves.filter(s => {\\n    var _a;\\n\\n    return (_a = board.get(s)) === null || _a === void 0 ? void 0 : _a.piece;\\n  });\\n\\n  if (!obstructions.length) {\\n    if (piece.type === 'pawn') return [...getPawnCaptures(origin, board), ...possibleMoves];\\n    return possibleMoves;\\n  }\\n\\n  let legalMoves = [];\\n\\n  switch (piece.type) {\\n    case 'knight':\\n      {\\n        legalMoves = possibleMoves;\\n        break;\\n      }\\n\\n    case 'pawn':\\n      {\\n        const capturesAvailable = getPawnCaptures(origin, board);\\n        const unobstructedMoves = removeMovesWithPieces(removeObstructedMoves(origin, possibleMoves, obstructions), board);\\n        legalMoves = [...capturesAvailable, ...unobstructedMoves];\\n        break;\\n      }\\n\\n    case 'king':\\n      {\\n        legalMoves = removeProtectedSquares(origin, possibleMoves, board);\\n        break;\\n      }\\n\\n    default:\\n      {\\n        legalMoves = removeObstructedMoves(origin, possibleMoves, obstructions);\\n      }\\n  }\\n\\n  return removeMovesWithPieces(legalMoves, board, piece.color);\\n}\\n\\nfunction getLegalMovesInCheck(origin, board, kingPos, squareGivingCheck) {\\n  const squaresThatDealWithCheck = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys()));\\n  const moves = getLegalMoves(origin, board);\\n  return moves.filter(s => squaresThatDealWithCheck.includes(s));\\n}\\n\\nfunction getAttackingMoves(origin, board) {\\n  const square = board.get(origin);\\n  const {\\n    type,\\n    color\\n  } = square.piece;\\n\\n  switch (type) {\\n    case 'pawn':\\n      {\\n        const piece = src_Piece(color, 'pawn');\\n        return piece.getPawnCaptures(origin);\\n      }\\n\\n    case 'king':\\n      {\\n        // need to do this because getLegalMoves will recursively call removeProtectedSquares otherwise\\n        const attackingMoves = removeMovesWithPieces(getPossibleMoves(origin, board), board, color);\\n        return attackingMoves;\\n      }\\n\\n    default:\\n      return getLegalMoves(origin, board);\\n  }\\n}\\n\\nfunction getAllMovesForColor(color, board, skipKing) {\\n  const allMoves = [];\\n\\n  for (const [square, {\\n    piece\\n  }] of board.entries()) {\\n    if (!piece) continue;\\n    if (piece.color !== color) continue;\\n    if (skipKing && piece.type === 'king') continue;\\n    allMoves.push(getLegalMoves(square, board));\\n  }\\n\\n  return allMoves.flat();\\n}\\n\\nfunction getAttackingMovesForColor(color, board) {\\n  const allMoves = [];\\n\\n  for (const [square, {\\n    piece\\n  }] of board.entries()) {\\n    if (!piece) continue;\\n    if (piece.color !== color) continue;\\n    allMoves.push(getAttackingMoves(square, board));\\n  }\\n\\n  return allMoves.flat();\\n}\\n\\nfunction getPawnCaptures(pawnSquare, board) {\\n  var _a;\\n\\n  const {\\n    color\\n  } = (_a = board.get(pawnSquare)) === null || _a === void 0 ? void 0 : _a.piece;\\n  const pawn = src_Piece(color, 'pawn');\\n  const captureMoves = pawn.getPawnCaptures(pawnSquare);\\n  if (!captureMoves) return [];\\n  return captureMoves.filter(s => {\\n    const squareVal = board.get(s);\\n    if (!squareVal) return false;\\n    const piece = squareVal.piece;\\n    const enPassant = squareVal.enPassant;\\n    return piece && piece.color !== pawn.color || enPassant && enPassant.color !== pawn.color;\\n  });\\n}\\n\\nfunction getSquaresBetweenKingAndCheck(kingPos, checkPos, allSquares) {\\n  // includes kingPos and checkPos\\n  const squaresAlongVector = getMovesAlongVector(kingPos, checkPos, allSquares);\\n  const squaresBetweenKingAndPiece = removeMovesBehindTwoSquares(kingPos, checkPos, squaresAlongVector);\\n  return squaresBetweenKingAndPiece;\\n}\\n/* filter moves */\\n\\n\\nfunction removeMovesBehindTwoSquares(s1, s2, vector) {\\n  const sorted = sortMovesClosestTo(getBeginningOfVector(vector))(vector);\\n  let furthestSquare;\\n  let closestSquare;\\n\\n  if (sorted.indexOf(s1) > sorted.indexOf(s2)) {\\n    furthestSquare = s1;\\n    closestSquare = s2;\\n  } else {\\n    furthestSquare = s2;\\n    closestSquare = s1;\\n  }\\n\\n  const removedOneEnd = removeMovesBehindSquare(furthestSquare)(sorted);\\n  const removedBothEnds = removeMovesBehindSquare(closestSquare)(removedOneEnd.reverse());\\n  return removedBothEnds;\\n}\\n\\nconst removeMovesBehindSquare = square => moves => {\\n  const copy = [...moves];\\n  const index = moves.indexOf(square);\\n  if (index === -1) return [];\\n  copy.splice(index + 1);\\n  return copy;\\n};\\n\\nfunction removeObstructedMoves(startingSquare, possibleMoves, obstructions) {\\n  // a) split possible moves into vectors (up,down,left,right, and/or diagonals)\\n  // b) see which obstructions belong to which vector\\n  // c) find the closest obstruction\\n  // d) remove all the moves behind that obstruction\\n  const filteredMoves = [];\\n  const allVectors = splitIntoVectors(possibleMoves, startingSquare);\\n  const obstructionVectors = splitIntoVectors(obstructions, startingSquare);\\n\\n  for (const vector in allVectors) {\\n    if (!obstructionVectors[vector]) {\\n      // look for vector obstruction is on\\n      filteredMoves.push(allVectors[vector]);\\n      continue;\\n    }\\n\\n    const sorted = sortMovesClosestTo(startingSquare)(allVectors[vector]);\\n    const closestObstruction = sortMovesClosestTo(startingSquare)(obstructionVectors[vector])[0];\\n    filteredMoves.push(removeMovesBehindSquare(closestObstruction)(sorted));\\n  }\\n\\n  return filteredMoves.flat();\\n}\\n\\nfunction removeProtectedSquares(kingPos, possibleMoves, board) {\\n  var _a;\\n\\n  const king = (_a = board.get(kingPos)) === null || _a === void 0 ? void 0 : _a.piece;\\n  const oppColor = king.color === 'white' ? 'black' : 'white'; // bc king cant move if square is protected\\n  // set king piece on each square in possible moves to find which squares are protected\\n\\n  const boardCopy = new Map(board);\\n  possibleMoves.forEach(s => boardCopy.set(s, {\\n    piece: king\\n  }));\\n  const allEnemyMoves = getAttackingMovesForColor(oppColor, boardCopy);\\n  return possibleMoves.filter(s => {\\n    return !allEnemyMoves.includes(s);\\n  });\\n}\\n\\nfunction removeMovesWithPieces(moves, board, color) {\\n  return moves.filter(s => {\\n    const squareVal = board.get(s);\\n    if (!squareVal) return false;\\n    if (color) return !squareVal.piece || squareVal.piece.color !== color;else return !squareVal.piece;\\n  });\\n}\\n/* gameboard checks */\\n\\n\\nfunction getDiscoveredCheck(kingPos, kingColor, vacated, board) {\\n  var _a; // openSquare is a square just vacated\\n\\n\\n  let squaresAlongVector = getMovesAlongVector(kingPos, vacated, Array.from(board.keys()));\\n  squaresAlongVector = squaresAlongVector.filter(s => s !== kingPos && s !== vacated);\\n  if (!squaresAlongVector.length) return '';\\n\\n  for (const square of squaresAlongVector) {\\n    const piece = (_a = board.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\\n    if (!piece || piece.color === kingColor) continue;\\n    const legalMoves = getLegalMoves(square, board);\\n    if (legalMoves.includes(kingPos)) return square;\\n  }\\n\\n  return '';\\n}\\n\\nfunction canBlockOrCaptureCheck(kingPos, squareGivingCheck, board) {\\n  var _a;\\n\\n  const king = (_a = board.get(kingPos)) === null || _a === void 0 ? void 0 : _a.piece;\\n  const blockOrCaptureSquares = getSquaresBetweenKingAndCheck(kingPos, squareGivingCheck, Array.from(board.keys())); // also includes check square\\n\\n  const ownPieceMoves = getAllMovesForColor(king.color, board, true);\\n  return ownPieceMoves.some(move => blockOrCaptureSquares.includes(move));\\n}\\n\\nfunction getPiecesWithMove(board, move, pieceType, color) {\\n  const pieceSquares = [];\\n\\n  for (const [square, {\\n    piece\\n  }] of board.entries()) {\\n    if (!piece) continue;\\n    if (piece.color !== color) continue;\\n    if (piece.type !== pieceType) continue;\\n  }\\n}\\n\\n\\n;// CONCATENATED MODULE: ./src/ranksAndFiles.ts\\nconst files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\\nconst ranks = [1, 2, 3, 4, 5, 6, 7, 8];\\n\\n;// CONCATENATED MODULE: ./src/Castle.ts\\nfunction Castle(whiteKingside, whiteQueenside, blackKingside, blackQueenside) {\\n  return {\\n    white: {\\n      kingside: whiteKingside,\\n      queenside: whiteQueenside\\n    },\\n    black: {\\n      kingside: blackKingside,\\n      queenside: blackQueenside\\n    }\\n  };\\n}\\n;// CONCATENATED MODULE: ./src/Gameboard.ts\\n\\n\\n\\n\\n\\n\\nfunction createBoard() {\\n  return files.reduce((acc, file) => {\\n    ranks.forEach(rank => {\\n      const square = file.concat(rank.toString());\\n      acc.set(square, {\\n        piece: null\\n      });\\n    });\\n    return acc;\\n  }, new Map());\\n}\\n\\nconst Gameboard = (board = createBoard(), squaresGivingCheck, CastleRights) => {\\n  function placePieces(pieceMap, boardMap = board) {\\n    let color;\\n\\n    for (color in pieceMap) {\\n      const map = pieceMap[color];\\n      let pieceType;\\n\\n      for (pieceType in map) {\\n        const squares = map[pieceType];\\n        squares.forEach(s => at(s, boardMap).place({\\n          type: pieceType,\\n          color: color\\n        }));\\n      }\\n    }\\n  }\\n\\n  function makeMove(s1, s2, promote) {\\n    const piece = at(s1).piece; // validate move\\n\\n    if (!piece) return;\\n    if (!validate.move(s1, s2)) return;\\n    if (promote && !validate.promotion(s1, s2)) return;\\n\\n    switch (piece.type) {\\n      case 'pawn':\\n        {\\n          if (promote) {\\n            at(s1).promote(promote);\\n          }\\n\\n          if (enPassant.isCapture(s1, s2)) {\\n            enPassant.capture(s2);\\n          }\\n\\n          enPassant.remove();\\n\\n          if (enPassant.checkToggle(s1, s2)) {\\n            enPassant.toggle(piece.color, s2);\\n          }\\n\\n          from(s1).to(s2);\\n          break;\\n        }\\n\\n      case 'king':\\n        {\\n          // check if move is castle\\n          let castleSide = '';\\n          const castleSquares = get.castleSquares(piece.color);\\n\\n          for (const [side, squares] of Object.entries(castleSquares)) {\\n            if (squares[1] === s2) castleSide = side;\\n          }\\n\\n          if (castleSide) castle(piece.color, castleSide);else from(s1).to(s2);\\n          enPassant.remove();\\n          break;\\n        }\\n\\n      default:\\n        from(s1).to(s2);\\n        enPassant.remove();\\n    }\\n\\n    return board;\\n  }\\n\\n  function castle(color, side, boardMap = board) {\\n    const castleSquares = get.castleSquares(color)[side];\\n    const kingPos = get.kingPosition(color, boardMap);\\n    const rookPos = getRookPos();\\n    from(rookPos, boardMap).to(castleSquares[0]);\\n    from(kingPos, boardMap).to(castleSquares[1]);\\n\\n    function getRookPos() {\\n      const pieceMap = get.pieceMap(boardMap);\\n      const rookPos = pieceMap[color].rook.find(square => {\\n        const file = square.split('')[0];\\n        return side === 'kingside' ? files.indexOf(file) > 3 : files.indexOf(file) < 3;\\n      });\\n      return rookPos;\\n    } // need to get king position\\n    // need to get castle squares\\n    // need to find rook\\n\\n  }\\n\\n  const enPassant = (() => {\\n    function getSquare(current, color) {\\n      const {\\n        x,\\n        y\\n      } = toXY(current);\\n      const newY = color === 'white' ? y - 1 : y + 1;\\n      return fromXY({\\n        x,\\n        y: newY\\n      });\\n    }\\n\\n    return {\\n      checkToggle: (from, to) => {\\n        const {\\n          y: y1\\n        } = toXY(from);\\n        const {\\n          y: y2\\n        } = toXY(to);\\n        return Math.abs(y1 - y2) === 2;\\n      },\\n      toggle: (color, current, boardMap = board) => {\\n        const enPassantSquare = getSquare(current, color);\\n        at(enPassantSquare, boardMap).setEnPassant(color, current);\\n      },\\n      remove: (boardMap = board) => {\\n        for (const squareObj of boardMap.values()) {\\n          if (squareObj.enPassant) return squareObj.enPassant = undefined;\\n        }\\n      },\\n      isCapture: (from, to, boardMap = board) => {\\n        var _a;\\n\\n        const piece = at(from, boardMap).piece;\\n        const enPassant = (_a = boardMap.get(to)) === null || _a === void 0 ? void 0 : _a.enPassant;\\n        if (!piece || piece.type !== 'pawn') return false;\\n        if (!enPassant) return false;\\n        if (enPassant.color === piece.color) return false;\\n        return true;\\n      },\\n      capture: (to, boardMap = board) => {\\n        var _a;\\n\\n        const enPassant = (_a = boardMap.get(to)) === null || _a === void 0 ? void 0 : _a.enPassant;\\n        at(enPassant.current, boardMap).remove();\\n      }\\n    };\\n  })();\\n\\n  const at = (square, boardMap = board) => ({\\n    place: piece => {\\n      if (!boardMap.get(square)) return;\\n      boardMap.set(square, {\\n        piece\\n      });\\n    },\\n    remove: () => {\\n      if (!boardMap.get(square)) return;\\n      boardMap.set(square, {\\n        piece: null\\n      });\\n    },\\n    promote: pieceType => {\\n      const squareVal = boardMap.get(square);\\n      const piece = squareVal === null || squareVal === void 0 ? void 0 : squareVal.piece;\\n      if (!piece) return;\\n      boardMap.set(square, Object.assign(Object.assign({}, squareVal), {\\n        piece: Object.assign(Object.assign({}, piece), {\\n          type: pieceType\\n        })\\n      }));\\n    },\\n    setEnPassant: (color, current) => {\\n      if (!boardMap.get(square)) return;\\n      boardMap.set(square, {\\n        piece: null,\\n        enPassant: {\\n          current\\n          /* square pawn is on */\\n          ,\\n          color\\n        }\\n      });\\n    },\\n\\n    get piece() {\\n      var _a;\\n\\n      return (_a = boardMap.get(square)) === null || _a === void 0 ? void 0 : _a.piece;\\n    },\\n\\n    getLegalMoves: (checks = squaresGivingCheck || []) => {\\n      const {\\n        type,\\n        color\\n      } = at(square, boardMap).piece;\\n\\n      switch (checks.length) {\\n        case 2:\\n          {\\n            if (type !== 'king') return [];\\n            return getLegalMoves(square, boardMap);\\n          }\\n\\n        case 1:\\n          {\\n            return getLegalMovesInCheck(origin, boardMap, get.kingPosition(color), checks[0]);\\n          }\\n\\n        default:\\n          {\\n            if (type === 'king') {\\n              let legalMoves = getLegalMoves(square, boardMap);\\n              if (get.canCastle(color, 'kingside')) legalMoves = [...legalMoves, ...get.castleSquares(color).kingside];\\n              if (get.canCastle(color, 'queenside')) legalMoves = [...legalMoves, ...get.castleSquares(color).queenside];\\n              return legalMoves;\\n            } else return getLegalMoves(square, boardMap);\\n          }\\n      }\\n    }\\n  });\\n\\n  const from = (s1, boardMap = board) => ({\\n    to: s2 => {\\n      const piece = at(s1, boardMap).piece;\\n      if (!piece) return; // move piece\\n\\n      at(s1, boardMap).remove();\\n      at(s2, boardMap).place(piece);\\n    }\\n  });\\n\\n  const get = {\\n    kingPosition: (color, boardMap = board) => {\\n      for (const [square, value] of boardMap.entries()) {\\n        if (value.piece && value.piece.type === 'king' && value.piece.color === color) return square;\\n      }\\n    },\\n    pieceMap: (boardMap = board) => {\\n      const pieceMap = {\\n        white: {},\\n        black: {}\\n      };\\n\\n      for (const [square, value] of boardMap.entries()) {\\n        const {\\n          piece\\n        } = value;\\n        if (!piece) continue;\\n        const {\\n          type,\\n          color\\n        } = piece;\\n        pieceMap[color][type] = pieceMap[color][type] ? [...pieceMap[color][type], square] : [square];\\n      }\\n\\n      return pieceMap;\\n    },\\n    squaresGivingCheckAfterMove: (from, end) => {\\n      var _a;\\n\\n      const squaresGivingCheck = [];\\n      const piece = (_a = board.get(end)) === null || _a === void 0 ? void 0 : _a.piece;\\n      const oppColor = piece.color === 'white' ? 'black' : 'white';\\n      const kingPosition = get.kingPosition(oppColor);\\n      const pieceHitsKing = getLegalMoves(end, board).includes(kingPosition);\\n      if (pieceHitsKing) squaresGivingCheck.push(end);\\n      const discoveredCheck = getDiscoveredCheck(kingPosition, oppColor, from, board);\\n      if (discoveredCheck) squaresGivingCheck.push(discoveredCheck);\\n      return squaresGivingCheck;\\n    },\\n    isCheckmate: (color, squaresGivingCheck, boardMap = board) => {\\n      const kingPos = get.kingPosition(color, boardMap);\\n      const legalMoves = at(kingPos, boardMap).getLegalMoves(); // check if check can be blocked\\n\\n      if (squaresGivingCheck.length === 1) {\\n        if (canBlockOrCaptureCheck(kingPos, squaresGivingCheck[0], boardMap)) return false;\\n      }\\n\\n      if (legalMoves.length) return false;\\n      return true;\\n    },\\n\\n    castleSquares(color) {\\n      const rank = color === 'white' ? 1 : 8;\\n      return {\\n        kingside: [`f${rank}`, `g${rank}`],\\n        queenside: [`d${rank}`, `c${rank}`]\\n      };\\n    },\\n\\n    castleRightsAfterMove: (square, boardMap = board) => {\\n      const piece = at(square, boardMap).piece;\\n      const castleRights = CastleRights || Castle(true, true, true, true);\\n\\n      if (castleRights[piece.color].kingside || castleRights[piece.color].queenside) {\\n        // check if i need to change castling rights\\n        if (piece.type === 'king') {\\n          castleRights[piece.color].kingside = false;\\n          castleRights[piece.color].queenside = false;\\n        }\\n\\n        if (piece.type === 'rook') {\\n          // need to find if it is kingside or queenside rook\\n          const [file] = square.split('');\\n          const kingside = files.indexOf(file) > 3;\\n          if (kingside) castleRights[piece.color].kingside = false;else castleRights[piece.color].queenside = false;\\n        }\\n      }\\n\\n      return castleRights;\\n    },\\n    canCastle: (color, side, boardMap = board) => {\\n      if (CastleRights && !CastleRights[color][side]) return false; // check if rook still exists\\n\\n      if (!checkIfRookExists()) return false;\\n      const oppColor = color === 'white' ? 'black' : 'white';\\n      const oppMoves = getAttackingMovesForColor(oppColor, boardMap);\\n      const castleSquares = get.castleSquares(color)[side];\\n\\n      for (const square of castleSquares) {\\n        // check if castle square is cleared\\n        if (at(square, boardMap).piece) return false; // make sure castle square isnt attacked\\n\\n        if (oppMoves.includes(square)) return false;\\n      }\\n\\n      return true;\\n\\n      function checkIfRookExists() {\\n        let rookExists = false;\\n        const rank = color === 'white' ? 1 : 8;\\n        const loopStart = side === 'queenside' ? files.indexOf('a') : files.indexOf('d');\\n        const loopEnd = side === 'queenside' ? files.indexOf('e') : files.indexOf('h');\\n\\n        for (let i = loopStart; i <= loopEnd; i++) {\\n          const square = files[i] + rank;\\n          const piece = at(square, boardMap).piece;\\n          if (!piece) continue;\\n          if (piece.type === 'rook') rookExists = true;\\n        }\\n\\n        return rookExists;\\n      }\\n    },\\n    boardStateFromHistory: history => {\\n      const boardMap = createBoard();\\n      placePieces(standard, boardMap);\\n      let pieceMap = standard; // history is 2d array\\n\\n      const flat = history.flat();\\n      /* iterate over history */\\n\\n      for (const [i, m] of flat.entries()) {\\n        const parsed = parseNotation(m);\\n        const color = i % 2 === 0 ? 'white' : 'black';\\n\\n        if (parsed.castle) {\\n          castle(color, parsed.castle, boardMap);\\n          continue;\\n        }\\n\\n        const possiblePieces = pieceMap[color][parsed.pieceType].filter(s => getLegalMoves(s, boardMap).includes(parsed.to)); // get 'from' square\\n\\n        let s1;\\n\\n        if (parsed.from) {\\n          const notation = parsed.from;\\n          s1 = possiblePieces.find(s => {\\n            // if notation is a number, that means piece is on the rank === notation, if not, same file\\n            return isNaN(Number(notation)) ? s[0] === notation : s[1] === notation;\\n          }) || '';\\n        } else s1 = possiblePieces[0];\\n\\n        const piece = at(s1, boardMap).piece;\\n\\n        if (!s1 || !piece) {\\n          break;\\n        } // make move\\n\\n\\n        if (piece.type === 'pawn') {\\n          if (enPassant.isCapture(s1, parsed.to, boardMap)) {\\n            enPassant.capture(parsed.to, boardMap);\\n          }\\n\\n          enPassant.remove(boardMap);\\n          if (enPassant.checkToggle(s1, parsed.to)) enPassant.toggle(color, parsed.to, boardMap);\\n\\n          if (parsed.promote) {\\n            at(s1, boardMap).promote(parsed.promote);\\n          }\\n        } else enPassant.remove(boardMap);\\n\\n        from(s1, boardMap).to(parsed.to);\\n        pieceMap = get.pieceMap(boardMap);\\n      }\\n\\n      return boardMap;\\n    }\\n  };\\n  const validate = {\\n    move: (from, to, boardMap = board) => {\\n      const piece = at(from, boardMap).piece;\\n      if (!piece) return false;\\n      if (!at(from, boardMap).getLegalMoves().includes(to)) return false;\\n      return true;\\n    },\\n    promotion: (from, to, boardMap = board) => {\\n      const piece = at(from, boardMap).piece;\\n      if ((piece === null || piece === void 0 ? void 0 : piece.type) !== 'pawn') return false;\\n      const endOfBoard = piece.color === 'white' ? 8 : 1;\\n      const [, rank] = to.split('');\\n      if (+rank !== endOfBoard) return false;\\n      return true;\\n    }\\n  };\\n  return {\\n    createBoard,\\n    placePieces,\\n    castle,\\n    enPassant,\\n    at,\\n    from,\\n    get,\\n    validate,\\n    makeMove,\\n\\n    get board() {\\n      return board;\\n    }\\n\\n  };\\n};\\n\\n/* harmony default export */ const src_Gameboard = (Gameboard);\\n;// CONCATENATED MODULE: ./src/History.ts\\n// should output history object that holds move history in 2d array\\n// for each move needs to attach piece Type to beginning of move if not pawn\\n// should further specify square of piece if, say both rooks, can move to same square\\n\\nfunction History(prevHistory, board, pieceMap) {\\n  const history = prevHistory || [];\\n  const get = {\\n    piecePrefix: (from, to) => {\\n      var _a;\\n\\n      const {\\n        type,\\n        color\\n      } = (_a = board.get(to)) === null || _a === void 0 ? void 0 : _a.piece;\\n\\n      switch (type) {\\n        case 'pawn':\\n          return '';\\n\\n        case 'knight':\\n        case 'rook':\\n          {\\n            let prefix = type === 'rook' ? 'R' : 'N';\\n\\n            if (pieceMap[color][type].length !== 1) {\\n              // look for piece of same type that couldve also went to the square\\n              pieceMap[color][type].forEach(s => {\\n                if (s === to) return;\\n                const boardCopy = new Map(board);\\n                boardCopy.set(to, {\\n                  piece: null\\n                });\\n\\n                if (getLegalMoves(s, boardCopy).includes(to)) {\\n                  const [x1, y1] = from.split('');\\n                  const [x2] = s.split('');\\n                  const sameFile = x1 === x2;\\n                  prefix = sameFile ? prefix + y1 : prefix + x1;\\n                }\\n              });\\n            }\\n\\n            return prefix;\\n          }\\n\\n        default:\\n          {\\n            const prefix = type.charAt(0).toUpperCase();\\n            return prefix;\\n          }\\n      }\\n    },\\n    castleNotation: side => {\\n      return side === 'kingside' ? 'O-O' : 'O-O-O';\\n    }\\n  };\\n  const affix = {\\n    capture: (move, prefix) => {\\n      return `${prefix}x${move}`;\\n    },\\n    promote: (move, pieceType) => {\\n      const suffix = pieceType === 'knight' ? 'N' : pieceType.charAt(0).toUpperCase();\\n      return `${move}=${suffix}`;\\n    },\\n    check: notation => {\\n      return `${notation}+`;\\n    },\\n    checkmate: notation => {\\n      return `${notation}#`;\\n    }\\n  };\\n  return {\\n    get,\\n    affix,\\n    insertMove: notation => {\\n      const lastMovePair = history[history.length - 1];\\n\\n      if (lastMovePair.length === 1) {\\n        lastMovePair.push(notation);\\n      } else {\\n        const newMovePair = [notation];\\n        history.push(newMovePair);\\n      }\\n    }\\n  };\\n}\\n;// CONCATENATED MODULE: ./src/startingPositions.ts\\nconst standard = {\\n  white: {\\n    rook: ['a1', 'h1'],\\n    knight: ['g1', 'b1'],\\n    bishop: ['f1', 'c1'],\\n    king: ['e1'],\\n    queen: ['d1'],\\n    pawn: ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2']\\n  },\\n  black: {\\n    rook: ['a8', 'h8'],\\n    knight: ['g8', 'b8'],\\n    bishop: ['f8', 'c8'],\\n    king: ['e8'],\\n    queen: ['d8'],\\n    pawn: ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7']\\n  }\\n};\\n\\n;// CONCATENATED MODULE: ./src/main.ts\\n\\n\\n\\n\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///708\\n\")}},__nested_webpack_require_131260__={d:(Q,F)=>{for(var B in F)__nested_webpack_require_131260__.o(F,B)&&!__nested_webpack_require_131260__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),r:Q=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(Q,\"__esModule\",{value:!0})}},__webpack_exports__={};return __webpack_modules__[708](0,__webpack_exports__,__nested_webpack_require_131260__),__webpack_exports__})()}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///427\n")}},__webpack_module_cache__={};function __webpack_require__(U){var F=__webpack_module_cache__[U];if(void 0!==F)return F.exports;var Q=__webpack_module_cache__[U]={exports:{}};return __webpack_modules__[U].call(Q.exports,Q,Q.exports,__webpack_require__),Q.exports}__webpack_require__.d=(U,F)=>{for(var Q in F)__webpack_require__.o(F,Q)&&!__webpack_require__.o(U,Q)&&Object.defineProperty(U,Q,{enumerable:!0,get:F[Q]})},__webpack_require__.o=(U,F)=>Object.prototype.hasOwnProperty.call(U,F),__webpack_require__.r=U=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(U,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(U,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(323);return __webpack_exports__})()));